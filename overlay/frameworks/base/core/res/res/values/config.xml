<?xml version="1.0" encoding="utf-8"?>
<!--
#
# Copyright (C) 2018 The Xiaomi-SDM660 Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This file sets variables that control the way modules are built
# thorughout the system. It should not be used to conditionally
# disable makefiles (the proper mechanism to control what gets
# included in a build is to use PRODUCT_PACKAGES in a product
# definition file).
#
-->

<resources>
	<!-- Operating volatage for bluetooth controller. 0 by default-->
	<integer translatable="false" name="config_bluetooth_operating_voltage_mv">3300</integer>

	<!-- The duration (in milliseconds) for the outgoing sms authorization request to timeout.-->
	<integer name="config_sms_authorization_timeout_ms">15000</integer>

	<!-- Enable SMS authorization support -->
	<bool name="config_sms_authorization_enabled">true</bool>

	<!-- Set to true to add links to Cell Broadcast app from Settings and MMS app. -->
	<bool name="config_cellBroadcastAppLinks">true</bool>

	<!-- Is the battery LED intrusive? Used to decide if there should be a disable option -->
	<bool name="config_intrusiveBatteryLed">true</bool>

	<!-- Default value for led color when battery is low on charge -->
	<integer name="config_notificationsBatteryLowARGB">0xFFFF0000</integer>

	<!-- Default value for led color when battery is medium charged -->
	<integer name="config_notificationsBatteryMediumARGB">0xFFFF0000</integer>

	<!-- Default value for led color when battery is fully charged -->
	<integer name="config_notificationsBatteryFullARGB">0xFFFF0000</integer>

	<!-- Does the notification LED support multiple colors? Used to decide if the user can change the colors -->
	<bool name="config_multiColorNotificationLed">false</bool>

	<!-- Default color for notification LED. -->
	<color name="config_defaultNotificationColor">#ffff0000</color>

	<!-- Is the notification LED intrusive? Used to decide if there should be a disable option -->
	<bool name="config_intrusiveNotificationLed">true</bool>

	<!-- Do the battery/notification LEDs support pulsing? Used to decide if we show pulse settings -->
	<bool name="config_ledCanPulse">true</bool>

	<!-- The device supports freeform window management. Windows have title bars and can be moved
		 and resized. If you set this to true, you also need to add
		 PackageManager.FEATURE_FREEFORM_WINDOW_MANAGEMENT feature to your device specification.
		 The duplication is necessary, because this information is used before the features are
		 available to the system.-->
	<bool name="config_freeformWindowManagement">true</bool>

	<!-- List of regexpressions describing the interface (if any) that represent tetherable
		 USB interfaces.  If the device doesn't want to support tething over USB this should
		 be empty.  An example would be "usb.*" -->
	<string-array translatable="false" name="config_tether_usb_regexs">
		<item>"usb\\d"</item>
		<item>"rndis\\d"</item>
	</string-array>

	<!-- List of regexpressions describing the interface (if any) that represent tetherable
		 Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
		 should be empty.  An example would be "softap.*" -->
	<string-array translatable="false" name="config_tether_wifi_regexs">
		<item>"wlan0"</item>
		<item>"wigig0"</item>
		<item>"softap0"</item>
	</string-array>

	<!-- This string array should be overridden by the device to present a list of radio
		 attributes.  This is used by the connectivity manager to decide which networks can coexist
		 based on the hardware -->
	<!-- An Array of "[ConnectivityManager connectionType],
					  [# simultaneous connection types]"  -->
	<string-array translatable="false" name="radioAttributes">
		<item>"1,1"</item>
		<item>"0,1"</item>
		<item>"7,1"</item>
		<item>"9,1"</item>
	</string-array>

	<!-- List of regexpressions describing the interface (if any) that represent tetherable
		 bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
		 should be empty. -->
	<string-array translatable="false" name="config_tether_bluetooth_regexs">
			<item>"bnep\\d"</item>
			<item>"bt-pan"</item>
	</string-array>

    <!-- When true, the tethering upstream network follows the current default
         Internet network (except when the current default network is mobile,
         in which case a DUN network will be used if required). -->
    <bool translatable="false" name="config_tether_upstream_automatic">true</bool>

	<!-- Boolean indicating if current platform supports BLE peripheral mode -->
	<bool name="config_bluetooth_le_peripheral_mode_supported">true</bool>

	<!-- Boolean indicating whether the wifi chipset has dual frequency band support -->
	<bool translatable="false" name="config_wifi_dual_band_support">true</bool>

	<!-- Boolean indicating whether the wifi chipset has background scan support -->
	<bool translatable="false" name="config_wifi_background_scan_support">true</bool>

	<!-- If this is true, the screen will come on when you plug/unplug usb/power/whatever. -->
	<bool name="config_unplugTurnsOnScreen">true</bool>

	<!-- Boolean indicating if restoring network selection should be skipped -->
	<!-- The restoring is handled by modem if it is true-->
	<bool translatable="false" name="skip_restoring_network_selection">true</bool>

	<!-- Is the device capable of hot swapping an ICC Card -->
	<bool name="config_hotswapCapable">true</bool>

	<!-- Set to true if the wifi display supports compositing content stored
		 in gralloc protected buffers.  For this to be true, there must exist
		 a protected hardware path for surface flinger to composite and send
		 protected buffers to the wifi display video encoder.

		 If this flag is false, we advise applications not to use protected
		 buffers (if possible) when presenting content to a wifi display because
		 the content may be blanked.

		 This flag controls whether the {@link Display#FLAG_SUPPORTS_PROTECTED_BUFFERS}
		 flag is set for wifi displays.
	-->
	<bool name="config_wifiDisplaySupportsProtectedBuffers">true</bool>

	<!-- Flag indicating whether the we should enable the automatic brightness in Settings.
		 Software implementation will be used if config_hardware_auto_brightness_available is not set -->
	<bool name="config_automatic_brightness_available">true</bool>

	<!-- Wifi driver supports batched scan -->
	<bool translatable="false" name="config_wifi_batched_scan_supported">true</bool>

	<!-- Configure wifi tcp buffersizes in the form:
		 rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max -->
	<string name="config_wifi_tcp_buffers" translatable="false">524288,2097152,8388608,262144,524288,4194304</string>

	<!-- MMS user agent string -->
	<string name="config_mms_user_agent" translatable="false">Android-Mms/2.0</string>

	<!-- MMS user agent prolfile url -->
	<string name="config_mms_user_agent_profile_url" translatable="false"
			>http://www.google.com/oha/rdf/ua-profile-kila.xml</string>

	<!-- Configuration to restart radio upon PDP_DEACTIVATE with
		 error cause as Regular deactivation(36). -->
	<!--
	<bool name="config_radio_reset_on_regular_deactivation">false</bool>
	-->
	<!-- Flag indicating if the speed up audio on mt call code should be executed -->
	<bool name="config_speed_up_audio_on_mt_calls">true</bool>

	<!-- Whether camera shutter sound is forced or not  (country specific). -->
	<bool name="config_camera_sound_forced">false</bool>

	<!-- Configuration to enable non-default PDP during IWLAN
	<bool name="config_feature_iwlan_enabled">true</bool> -->

	<!-- Is the device capable of supporting digital pen
	<bool name="config_digitalPenCapable">true</bool> -->

	<!-- Flag specifying whether VoLTE is available on device -->
	<bool name="config_device_volte_available">true</bool>

	<!-- Flag specifying whether VoLTE should be available for carrier: independent of
		 carrier provisioning. If false: hard disabled. If true: then depends on carrier
		 provisioning, availability etc -->
	<bool name="config_carrier_volte_available">true</bool>

	<!-- Flag specifying whether WFC over IMS is available on device -->
	<bool name="config_device_wfc_ims_available">true</bool>

	<!-- Flag specifying whether WFC over IMS should be available for carrier: independent of
		 carrier provisioning. If false: hard disabled. If true: then depends on carrier
		 provisioning, availability etc -->
	<bool name="config_carrier_wfc_ims_available">true</bool>

	<!-- ComponentName of a dream to show whenever the system would otherwise have
		 gone to sleep.  When the PowerManager is asked to go to sleep, it will instead
		 try to start this dream if possible.  The dream should typically call startDozing()
		 to put the display into a low power state and allow the application processor
		 to be suspended.  When the dream ends, the system will go to sleep as usual.
		 Specify the component name or an empty string if none.
		 Note that doze dreams are not subject to the same start conditions as ordinary dreams.
		 Doze dreams will run whenever the power manager is in a dozing state. -->
	<string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>

	<!-- If true, the doze component is not started until after the screen has been
		 turned off and the screen off animation has been performed. -->
	<bool name="config_dozeAfterScreenOffByDefault">true</bool>

	<!-- Control whether the always on display mode is available. This should only be enabled on
		 devices where the display has be tuned to be power efficient in DOZE and/or DOZE_SUSPEND
		 states. -->
	<bool name="config_dozeAlwaysOnDisplayAvailable">true</bool>

	<!-- Power Management: Specifies whether to decouple the auto-suspend state of the
		 device from the display on/off state.
		 When false, autosuspend_disable() will be called before the display is turned on
		 and autosuspend_enable() will be called after the display is turned off.
		 This mode provides best compatibility for devices using legacy power management
		 features such as early suspend / late resume.
		 When true, autosuspend_display() and autosuspend_enable() will be called
		 independently of whether the display is being turned on or off.  This mode
		 enables the power manager to suspend the application processor while the
		 display is on.
		 This resource should be set to "true" when a doze component has been specified
		 to maximize power savings but not all devices support it.
		 Refer to autosuspend.h for details.
	-->
	<bool name="config_powerDecoupleAutoSuspendModeFromDisplay">false</bool>

	<!-- Power Management: Specifies whether to decouple the interactive state of the
		 device from the display on/off state.
		 When false, setInteractive(..., true) will be called before the display is turned on
		 and setInteractive(..., false) will be called after the display is turned off.
		 This mode provides best compatibility for devices that expect the interactive
		 state to be tied to the display state.
		 When true, setInteractive(...) will be called independently of whether the display
		 is being turned on or off.  This mode enables the power manager to reduce
		 clocks and disable the touch controller while the display is on.
		 This resource should be set to "true" when a doze component has been specified
		 to maximize power savings but not all devices support it.
		 Refer to power.h for details.
	-->
	<bool name="config_powerDecoupleInteractiveModeFromDisplay">true</bool>

	    <!-- Whether device has support for auto brightness in doze mode -->
	<bool name="config_allowAutoBrightnessWhileDozing">true</bool>

	<!-- Indicate whether closing the lid causes the device to go to sleep and opening
		  it causes the device to wake up.
		  The default is false. -->
	<bool name="config_lidControlsSleep">true</bool>

	<!--  Maximum number of supported users -->
	<integer name="config_multiuserMaximumUsers">4</integer>

	<!--  Whether Multiuser UI should be shown -->
	<bool name="config_enableMultiUserUI">true</bool>

	<!-- ImsService package name to bind to by default, if config_dynamic_bind_ims is true -->
	<string name="config_ims_package">org.codeaurora.ims</string>

	<!-- Flag specifying whether or not IMS will use the ImsResolver dynamically -->
	<bool name="config_dynamic_bind_ims">true</bool>

	<!-- Enable video pause workaround when enabling/disabling the camera. -->
	<bool name="config_useVideoPauseWorkaround">true</bool>

	<!-- Config determines whether to update phone object when voice registration
	state changes. Voice radio tech change will always trigger an update of
	phone object irrespective of this config -->
	<bool name="config_switch_phone_on_voice_reg_state_change">false</bool>

	<!--  Define Google play service package for FRP-->
	<string name="config_persistentDataPackageName" translatable="false">com.google.android.gms</string>

	<!-- When true use the linux /dev/input/event subsystem to detect the switch changes
	on the headphone/microphone jack. When false use the older uevent framework -->
	<bool name="config_useDevInputEventForAudioJack">true</bool>

  <!-- Default list of files pinned by the Pinner Service -->
  <string-array translatable="false" name="config_defaultPinnerServiceFiles">
        <item>"/system/framework/arm64/boot-framework.oat"</item>
        <item>"/system/framework/boot-framework.vdex"</item>
        <item>"/system/framework/oat/arm64/services.odex"</item>
        <item>"/system/framework/oat/arm64/services.vdex"</item>
        <item>"/system/framework/arm64/boot.oat"</item>
        <item>"/system/framework/boot.vdex"</item>
        <item>"/system/framework/arm64/boot-core-libart.oat"</item>
        <item>"/system/framework/boot-core-libart.vdex"</item>
        <item>/system/lib64/libRScpp.so</item>
        <item>/system/lib64/libRS.so</item>
        <item>/system/lib64/libRS_internal.so</item>
        <item>/system/lib64/libbcinfo.so</item>
        <item>/system/lib64/libRSDriver.so</item>
        <item>/system/lib64/libRSCpuRef.so</item>
        <item>/system/lib64/libblas.so</item>
        <item>"/system/priv-app/SystemUI/oat/arm64/SystemUI.vdex"</item>
        <item>"/system/priv-app/SystemUI/oat/arm64/SystemUI.odex"</item>
        <item>"/system/lib64/libsurfaceflinger.so"</item>
  </string-array>

	<!-- True if camera app should be pinned via Pinner Service -->
	<bool name="config_pinnerCameraApp">true</bool>

	<!-- Should the pinner service pin the Home application? -->
	<bool name="config_pinnerHomeApp">true</bool>

	<!-- Whether WiFi display is supported by this device.
		 There are many prerequisites for this feature to work correctly.
		 Here are a few of them:
		 * The WiFi radio must support WiFi P2P.
		 * The WiFi radio must support concurrent connections to the WiFi display and
			to an access point.
		 * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
			remote submix module.  This module is used to record and stream system
			audio output to the WiFi display encoder in the media server.
		 * The remote submix module "audio.r_submix.default" must be installed on the device.
		 * The device must be provisioned with HDCP keys (for protected content).
	-->
	<bool name="config_enableWifiDisplay">true</bool>

	<!-- Boolean indicating whether the HWC setColorTransform function can be performed efficiently
		 in hardware. -->
	<bool name="config_setColorTransformAccelerated">true</bool>

	<!-- Whether device supports double tap to wake -->
	<bool name="config_supportDoubleTapWake">true</bool>

	<!-- Whether a software navigation bar should be shown. NOTE: in the future this may be
				  autodetected from the Configuration. -->
	<bool name="config_showNavigationBar">true</bool>

	<!-- Enables or disables fading edges when marquee is enabled in TextView.
		 Off by default, since the framebuffer readback used to implement the
		 fading edges is prohibitively expensive on most GPUs. -->
	<bool name="config_ui_enableFadingMarquee">false</bool>

	<!-- If true, the screen can be rotated via the accelerometer in all 4
		 rotations as the default behavior. -->
	<bool name="config_allowAllRotations">true</bool>

	<!-- Enable lockscreen rotation by default -->
    <bool name="config_enableLockScreenRotation">true</bool>

	<!-- Control the behavior when the user long presses the home button.
			0 - Nothing
			1 - Menu key
			2 - Recent apps view in SystemUI
			3 - Launch assist intent
			4 - Voice Search
			5 - In-app Search
		 This needs to match the constants in
		 policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
	-->
	<integer name="config_longPressOnHomeBehavior">3</integer>

	<!-- Enable overlay for all location components. -->
	<string name="config_networkLocationProviderPackageName" translatable="false">com.qualcomm.location</string>
	<string name="config_fusedLocationProviderPackageName" translatable="false">com.qualcomm.location</string>

	<!-- Whether or not swipe up gesture's opt-in setting is available on this device -->
	<bool name="config_swipe_up_gesture_setting_available">true</bool>

	<!-- Whether device ignores the RSSNR signal implementation -->
	<bool name="config_ignoreRssnrSignalLevel">true</bool>

	<!-- Enable ACS (auto channel selection) for Wifi hotspot (SAP) -->
	<bool translatable="false" name="config_wifi_softap_acs_supported">true</bool>

	<!-- Enable 802.11ac for Wifi hotspot (SAP) -->
	<bool translatable="false" name="config_wifi_softap_ieee80211ac_supported">true</bool>

	<!-- Flag indicating whether we should enable smart battery. -->
	<bool name="config_smart_battery_available">true</bool>

	<!-- Make things go fast -->
	<bool name="config_ui_enableFadingMarquee">false</bool>

	<!-- Set this to true to enable the platform's auto-power-save modes like doze and
		  app standby.  These are not enabled by default because they require a standard
		  cloud-to-device messaging service for apps to interact correctly with the modes
		  (such as to be able to deliver an instant message to the device even when it is
		  dozing).  This should be enabled if you have such services and expect apps to
		  correctly use them when installed on your device.  Otherwise, keep this disabled
		  so that applications can still use their own mechanisms. -->
	<bool name="config_enableAutoPowerModes">true</bool>

	<!-- Flag indicating whether round icons should be parsed from the application manifest. -->
	<bool name="config_useRoundIcon">true</bool>

	 <!-- Whether the device has outdated qti-telephony-common.jar -->
	<bool name="config_oldQtiTelephony">false</bool>

	<!-- Amount of time it takes for the light sensor to warm up in milliseconds.
		  For this time after the screen turns on, the Power Manager
		  will not debounce light sensor readings -->
	<integer name="config_lightSensorWarmupTime">200</integer>

	<!-- Whether notify fingerprint client of successful cancelled authentication -->
	<bool name="config_notifyClientOnFingerprintCancelSuccess">true</bool>

	<!-- The RadioAccessFamilies supported by the device.
		 Empty is viewed as "all".  Only used on devices which
		 don't support RIL_REQUEST_GET_RADIO_CAPABILITY
		 format is UMTS|LTE|... -->
	<string translatable="false" name="config_radio_access_family">CDMA|EVDO|GSM|TD_SCDMA|WCDMA|LTE</string>

	<!-- Whether the Unprocessed audio source supports the required frequency range and level -->
    <bool name="config_supportAudioSourceUnprocessed">true</bool>

    <!-- Default value for proximity check on screen wake
         NOTE ! - Enable for devices that have a fast response proximity sensor (ideally < 300ms)-->
    <bool name="config_proximityCheckOnWake">true</bool>
    <integer name="config_proximityCheckTimeout">100</integer>
    <bool name="config_proximityCheckOnWakeEnabledByDefault">true</bool>

    <!-- Stop listening to the fingerprint reader when NON-WAKEUP proximity sensor is covered & screen is off.
         config_proximityCheckOnWake must be true. -->
    <bool name="config_proximityCheckOnFingerprintWake">true</bool>

    <!-- Enable system navigation keys. -->
    <bool name="config_supportSystemNavigationKeys">true</bool>

    <!-- Specify if the fingerprint hardware support gestures-->
    <bool name="config_fingerprintSupportsGestures">true</bool>

		<!-- Time to give to the proximity sensor before toggling the flashlight with the Power button.
         Set to -1 to disable the proximity sensor check at all-->
    <integer name="config_flashlightProximityTimeout">-1</integer>

		<!-- Paths to the libraries that contain device specific key handlers -->
		<string-array name="config_deviceKeyHandlerLibs" translatable="false">
			<item>/system/framework/org.lineageos.keyhandler.jar</item>
		</string-array>

		<!-- Names of the key handler classes -->
		<string-array name="config_deviceKeyHandlerClasses" translatable="false">
			<item>org.lineageos.settings.device.KeyHandler</item>
		</string-array>

		<!-- Show HD VoLTE Icon -->
		<bool name="config_display_hd_volte">true</bool>

    <!-- Whether device needs to wait for Qualcomm MPCTL service to start
         before setting power profiles on boot. -->
    <bool name="config_waitForMpctlOnBoot">true</bool>
</resources>
